//=============================================================================
//
// 敵マネージャー処理 [manager.cpp]
// Author : 佐藤瞭平
//
//=============================================================================
#include"enemy_manager.h"
#include"enemy.h"
#include"enemy_doragonfly.h"
#include"timer.h"

#define ENEMY_TEXT "data/TEXT/enemy.txt"

/*
ゲットタイマーで時間を取得してきて
ファイル読み込みをして時間を取得

if文で上記二つを比べて＝＝０になったら敵を出すようにする
posとかもファイル読み込みさせたほうがいいかも

エネミーを完全な抽象クラスにしてupdataは画面外の当たり判定だけにする
*/
//=============================================================================
// 静的メンバ変数の宣言
//=============================================================================
int CEnemy_manager::m_nNowTimer = 0;

//=============================================================================
// 敵マネージャーのコンストラクタ
//=============================================================================
CEnemy_manager::CEnemy_manager()
{
	m_pEnemy = NULL;
	m_pEmemy_Doragonfly  = NULL;
	memset(&m_Name[0], 0, sizeof(m_Name));
	memset(&m_Data[0], 0, sizeof(m_Data));
	memset(&m_GetTime[0], 0, sizeof(m_GetTime));
	m_GetEnemyType = 0;
	m_nCntTime = 0;
	m_nCoolTime = 0;
}

//=============================================================================
// 敵マネージャーのデストラクタ
//=============================================================================
CEnemy_manager::~CEnemy_manager()
{

}

//=============================================================================
// 敵マネージャーの初期化処理
//=============================================================================
HRESULT CEnemy_manager::Init(D3DXVECTOR3 pos,D3DXVECTOR2 Size)
{
	FILE *pFile = NULL;

	// 開け〜ファイル！
	pFile = fopen(ENEMY_TEXT, "r");	
	
		printf("ファイルが読み込まれませんでした。");
	
	// 閉じれ〜ファイル！
	fclose(pFile);

	return S_OK;
}

//=============================================================================
// 敵マネージャーの終了処理
//=============================================================================
void CEnemy_manager::Uninit(void)
{

}

//=============================================================================
// 敵マネージャーの更新処理
//=============================================================================
void CEnemy_manager::Update(void)
{
	m_nNowTimer = CTimer::GetTimer();
	int SetTime = rand() % 100 + 10;

	if (m_nCoolTime == 0)
	{
		if (SetTime % 80 == 0)
		{
			int m_nCoolTime = 100;
			m_pEnemy = CEnemy::Create(D3DXVECTOR3(1100.0f, 200.0f, 0.0f), D3DXVECTOR3(1.8f, 0.0f, 0.0f), D3DXVECTOR2(75.0f, 75.0f));
		}
	}
	else
	{
		m_nCoolTime--;
		if (m_nCoolTime <= 0)
		{
			m_nCoolTime = 0;
		}
	}


	float fPosY = (float)(rand() % 620 + 100);

	m_nCntTime++;

	if (m_nCntTime % 240 == 0)
	{
		m_pEmemy_Doragonfly = CEnemy_Doragonfly::Create(D3DXVECTOR3(-100.0f, fPosY, 0.0f), D3DXVECTOR3(1.8f, 0.0f, 0.0f), D3DXVECTOR2(75.0f, 75.0f));
	}
}


//=============================================================================
// 敵マネージャーの描画処理
//=============================================================================
void CEnemy_manager::Draw(void)
{

}