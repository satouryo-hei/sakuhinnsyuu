//=============================================================================
//
// 命の処理 [life.cpp]
// Author : 佐藤瞭平
//
//=============================================================================
#include "life.h"
#include"number.h"
#include"polygon.h"

//=============================================================================
// 命のコンストラクタ
//=============================================================================
CLife::CLife(int nPriority) :CScene(nPriority)
{
	memset(&m_apNumber[0], NULL, sizeof(m_apNumber));
	m_nLife = 0;
}

//=============================================================================
// 命のデストラクタ
//=============================================================================
CLife::~CLife()
{

}

//=============================================================================
// 命の生成処理
//=============================================================================
CLife *CLife::Create(D3DXVECTOR3 pos, D3DXVECTOR2 Size)
{
	CLife *pLife = NULL;
	pLife = new CLife;

	if (pLife != NULL)
	{
		pLife->Init(pos, Size);
		pLife->SetLife(3);
	}
	return pLife;
}

//=============================================================================
// 命の初期化処理
//=============================================================================
HRESULT CLife::Init(D3DXVECTOR3 pos, D3DXVECTOR2 Size)
{
	D3DXVECTOR3 Pos = pos;
	for (int nCntNum = 0; nCntNum < 2; nCntNum++)
	{
		Pos.x += (Size.x * 2);
		m_apNumber[nCntNum] = CNumber::Create(Pos, Size);
	}
	

	return S_OK;
}

//=============================================================================
// 命の終了処理
//=============================================================================
void CLife::Uninit(void)
{
	for (int nCntNum = 0; nCntNum < 2; nCntNum++)
	{
		if (m_apNumber[nCntNum] != NULL)
		{
			m_apNumber[nCntNum]->Uninit();
			delete m_apNumber[nCntNum];
		}
	}
	Relese();
}

//=============================================================================
// 命の更新処理
//=============================================================================
void CLife::Update(void)
{
	CLife::SetLife(m_nLife);
}

//=============================================================================
// 命の描画処理
//=============================================================================
void CLife::Draw(void)
{
	for (int nCntNum = 0; nCntNum < 2; nCntNum++)
	{
		m_apNumber[nCntNum]->Draw();
	}
}

//=============================================================================
// 命の配置処理
//=============================================================================
void CLife::SetLife(int nLife)
{
	m_nLife = nLife;

	m_apNumber[0]->SetNumber(m_nLife % 100 / 10);
	m_apNumber[1]->SetNumber(m_nLife % 10 / 1);;
}

//=============================================================================
// 命の計算処理
//=============================================================================
void CLife::AddLife(int nValue)
{
	m_nLife -= nValue;
}