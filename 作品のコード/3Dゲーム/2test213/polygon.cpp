//=============================================================================
//
// ポリゴンの処理 [player.cpp]
// Author : 佐藤瞭平
//
//=============================================================================
#include"polygon.h"
#include"renderer.h"
#include"manager.h"
#include"input.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CPolygon::CPolygon(PRIORITY Priority) :CScene2D(Priority)
{
	m_bUse = true;
	m_bRoll = false;
}


//=============================================================================
//　デストラクタ
//=============================================================================
CPolygon::~CPolygon()
{

}

//=============================================================================
// ポリゴンの生成処理
//=============================================================================
CPolygon *CPolygon::Create(D3DXVECTOR3 pos, D3DXVECTOR2 size,int nTex)
{
	// ポリゴンのポインター生成
	CPolygon * pPolygon = NULL;

	// 動的メモリの確保
	pPolygon = new CPolygon;

	// NULLチェック
	if (pPolygon != NULL)
	{
		// ポリゴンの初期化処理の呼び出し
		pPolygon->Init(pos, size);
		// ポリゴンのテクスチャ処理の呼び出し
		pPolygon->BindTextuer(nTex);
	}
	return pPolygon;
}

//=============================================================================
// ポリゴンの初期化処理
//=============================================================================
HRESULT CPolygon::Init(D3DXVECTOR3 pos, D3DXVECTOR2 size)
{
	// 継承元の初期化処理を呼び出す
	CScene2D::Init(pos, size);

	return S_OK;
}	// ポリゴンの初期化処理終了



//=============================================================================
// ポリゴンの終了処理
//=============================================================================
void CPolygon::Uninit(void)
{	
	// 継承元の終了処理を呼び出す
	CScene2D::Uninit();

	// 解放処理の呼び出し
	Release();

}// ポリゴンの終了処理終了


 //=============================================================================
 // ポリゴンの更新処理
 //=============================================================================
void CPolygon::Update(void)
{
	// 回転させるかどうか
	if (m_bRoll)
	{
		// 継承元の更新処理を呼び出す
		CScene2D::SetUpdateRollingSize();
	}
	else
	{
		// 継承元の更新処理を呼び出す
		CScene2D::Update();
	}
}// ポリゴンの更新処理終了



 //=============================================================================
 // ポリゴンの描画処理
 //=============================================================================
void CPolygon::Draw(void)
{
	// 継承元の描画処理を呼び出す
	CScene2D::Draw();

}	// ポリゴンの描画処理終了

void CPolygon::SetSize(D3DXVECTOR2 size)
{
	CScene2D::SetSize(size);
}
void CPolygon::SetCol(D3DCOLOR col)
{
	CScene2D::SetColor(col);
}
