//=============================================================================
//
// 弾の処理 [billboard.cpp]
// Author : 佐藤瞭平
//
//=============================================================================
#include"bullet.h"
#include "input.h"
#include "Renderer.h"
#include "manager.h"
#include"scene3D.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CBullet::CBullet(PRIORITY nPriority) :CBillboard(nPriority)
{
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_size = D3DXVECTOR2(0.0f, 0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_col = D3DXCOLOR(255,255,255,255);
	
	m_nLife = 0;
	m_bUse = true;
}

//=============================================================================
// デストラクタ
//=============================================================================
CBullet::~CBullet()
{

}

//=============================================================================
// 弾の生成処理
//=============================================================================
CBullet *CBullet::Create(D3DXVECTOR3 pos, D3DXVECTOR2 size, int nLife)
{
	// 弾のポインター生成
	CBullet* pBullet = NULL;

	// 動的メモリの確保
	pBullet = new CBullet;

	//　NULLチェック
	if (pBullet != NULL)
	{
		// 弾の初期化処理の呼び出し
		pBullet->Init(pos, size);

		// 弾の寿命の設定
		pBullet->m_nLife = nLife;

		// 弾のテクスチャの設定
		pBullet->BindTextuer(13);
	}
	return pBullet;
}

//=============================================================================
// 弾の初期化処理
//=============================================================================
HRESULT CBullet::Init(D3DXVECTOR3 pos, D3DXVECTOR2 size)
{
	// 継承元の初期化処理を呼び出す
	CBillboard::Init(pos, size);

	m_pos = pos;
	m_size = size;

	// 移動量の初期化
	m_move = D3DXVECTOR3(1.0f, 1.0f, 1.0f);

	return S_OK;
}

//=============================================================================
// 弾の終了処理
//=============================================================================
void CBullet::Uninit(void)
{
	// 継承元の終了処理を呼び出す
	//CBillboard::Uninit();

	Release();
}

//=============================================================================
// 弾の更新処理
//=============================================================================
void CBullet::Update(void)
{
	// 使わなくしたら
	if (!m_bUse)
	{
		// 終了処理の呼び出し
		Uninit();
		return;
	}
	else
	{
		// 位置の移動
		m_pos.z += m_move.z;

		// 体力を減らす
		m_nLife--;

		// 体力0以下になったとき
		if (m_nLife <= 0)
		{// 体力0にする
			m_nLife = 0;

			// 使わなくする
			m_bUse = false;
		}
		// 位置と大きさの設定
		SetPosSize(m_pos,m_size);
	}

	// 継承元の更新処理を呼び出す
	CBillboard::Update();
}

//=============================================================================
// 弾の描画処理
//=============================================================================
void CBullet::Draw(void)
{
	// 継承元の描画処理を呼び出す
	CBillboard::Draw();
}