//=============================================================================
//
//  2Dエフェクトの処理 [effect.cpp]
// Author : 佐藤瞭平
//
//=============================================================================
#include"effect.h"
#include"renderer.h"
#include"manager.h"
#include"input.h"
#include"polygon.h"
#include"fade.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
CPolygon *CEffect::m_pPolygon[POLYGON_MAX] = {};

//=============================================================================
// コンストラクタ
//=============================================================================
CEffect::CEffect(PRIORITY Priority) :CScene(PRIORITY_EFFECT)
{
	m_Size = D3DXVECTOR2(100, 50);
	m_Col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
}


//=============================================================================
// デストラクタ
//=============================================================================
CEffect::~CEffect()
{

}

//=============================================================================
// 2Dエフェクトの生成処理
//=============================================================================
CEffect *CEffect::Create(D3DXVECTOR3 pos)
{
	// 2Dエフェクトのポインター生成
	CEffect* pEffect = NULL;

	// 動的メモリの確保
	pEffect = new CEffect;

	// NULLチェック
	if (pEffect != NULL)
	{
		// 2Dエフェクトの初期化処理
		pEffect->Init(pos);
	}
	return pEffect;
}

//=============================================================================
//  2Dエフェクトの初期化処理
//=============================================================================
HRESULT CEffect::Init(D3DXVECTOR3 pos)
{
	// POLYGON_MAX分回す
	for (int nCnt = 0; nCnt < POLYGON_MAX; nCnt++)
	{
		// ポリゴンの生成処理
		m_pPolygon[nCnt] = CPolygon::Create(pos, m_Size,10);

		// ポリゴンの斜辺の設定処理
		m_pPolygon[nCnt]->SetAngle(D3DXVECTOR2(0.5f, 1), m_Size);
	}

	return S_OK;
}	//  2Dエフェクトの初期化処理の終了



//=============================================================================
//  2Dエフェクトの終了処理
//=============================================================================
void CEffect::Uninit(void)
{
	//for (int nCnt = 0; nCnt < POLYGON_MAX; nCnt++)
	//{
	//	if (m_pPolygon[nCnt] != NULL)
	//	{
	//		m_pPolygon[nCnt]->SetUse(false);
	//		m_pPolygon[nCnt] = NULL;
	//	}
	//}

	// シーンの解放処理
	CScene::Release();

}// 2Dエフェクトの終了処理の終了


 //=============================================================================
 //  2Dエフェクトの更新処理
 //=============================================================================
void CEffect::Update(void)
{
	// ポリゴンの回転の更新処理
	m_pPolygon[0]->SetUpdateRoll(0.02f,true);

	// ポリゴンの拡大縮小の更新処理
	m_pPolygon[0]->SetUpdateSize(150, 100);

	// ポリゴンの回転の更新処理
	m_pPolygon[1]->SetUpdateRoll(0.01f, false);

	// POLYGON_MAX分回す
	for (int nCnt = 0; nCnt < POLYGON_MAX; nCnt++)
	{
		// 回転させるかどうか
		m_pPolygon[nCnt]->SetRoll(true);
		//m_pPolygon[nCnt]->SetColor(m_Col);
	}
}// 2Dエフェクトの更新処理終了



 //=============================================================================
 // 2Dエフェクトの描画処理
 //=============================================================================
void CEffect::Draw(void)
{

}	// 2Dエフェクトの描画処理終了

//=============================================================================
// 2Dエフェクトの色設定処理
//=============================================================================
void CEffect::SetColor(D3DXCOLOR Col, int nNum)
{
	m_pPolygon[nNum]->SetColor(Col);	
}

//=============================================================================
// 2Dエフェクトの頂点ごとの色設定処理
//=============================================================================
void CEffect::SetVtxBuffColor(D3DXCOLOR Col, int nNum, int nVtxBuff)
{
	// 何番目のポリゴンのどこの頂点の色を変えるか
	m_pPolygon[nNum]->SetVtxBuffColor(Col, nVtxBuff);
}

//=============================================================================
// 2Dエフェクトの位置設定処理
//=============================================================================
void CEffect::Setpos(D3DXVECTOR3 pos)
{
	// POLYGON_MAX分回す
	for (int nCnt = 0; nCnt < POLYGON_MAX; nCnt++)
	{
		// ポリゴンの位置の設定処理を呼び出す
		m_pPolygon[nCnt]->SetPosition(pos);
	}
}