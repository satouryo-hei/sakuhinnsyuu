//=============================================================================
//
// ロゴの処理 [logo.cpp]
// Author : 佐藤瞭平
//
//=============================================================================
#include"logo.h"
#include"renderer.h"
#include"manager.h"
#include"polygon.h"


//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
CPolygon *CLogo::m_pPolygon = NULL;

//=============================================================================
// コンストラクタ
//=============================================================================
CLogo::CLogo(PRIORITY Priority) :CScene(PRIORITY_UI), m_fHeight(250.0f)
{
	m_Pos = D3DXVECTOR3(100.0f, 50.0f, 0);
	m_Move = D3DXVECTOR3(0, 10.0f, 0);
	m_Size = D3DXVECTOR2(100.0f, 50.0f);
}


//=============================================================================
// デストラクタ
//=============================================================================
CLogo::~CLogo()
{

}

//=============================================================================
// ロゴの生成処理
//=============================================================================
CLogo *CLogo::Create(D3DXVECTOR3 pos, D3DXVECTOR2 size)
{
	// 2Dエフェクトのポインター生成
	CLogo* pLogo = NULL;

	// 動的メモリの確保
	pLogo = new CLogo;

	// NULLチェック
	if (pLogo != NULL)
	{
		pLogo->m_Size = size;

		// ロゴの初期化処理
		pLogo->Init(pos);
	}
	return pLogo;
}

//=============================================================================
//  ロゴの初期化処理
//=============================================================================
HRESULT CLogo::Init(D3DXVECTOR3 pos)
{
	m_Pos = pos;
	m_pPolygon = CPolygon::Create(pos, m_Size,23);

	return S_OK;
}	//  ロゴの初期化処理の終了



	//=============================================================================
	//  ロゴの終了処理
	//=============================================================================
void CLogo::Uninit(void)
{
	// シーンの解放処理
	CScene::Release();

}// ロゴの終了処理の終了


 //=============================================================================
 //  ロゴの更新処理
 //=============================================================================
void CLogo::Update(void)
{
	if (m_Pos.y == m_fHeight)
	{
		m_Pos += m_Move;
		m_pPolygon->SetPosition(m_Pos);
	}
}// ロゴの更新処理終了



 //=============================================================================
 // ロゴの描画処理
 //=============================================================================
void CLogo::Draw(void)
{

}	// ロゴの描画処理終了
